"""
Problema de la Mochila 0-1 resuelto mediante Algoritmos Gen√©ticos

Este script implementa un algoritmo gen√©tico para resolver el cl√°sico problema de la mochila,
donde se debe maximizar el valor total de los √≠tems seleccionados sin exceder la capacidad m√°xima.

Caracter√≠sticas:
- Dataset ampliado de √≠tems (generado aleatoriamente)
- Soporte para m√∫ltiples ejecuciones
- An√°lisis estad√≠stico (media, desviaci√≥n est√°ndar, test t)
- Visualizaci√≥n interactiva de la evoluci√≥n del modelo
- Generaci√≥n de reporte final de soluciones

Autor: Yerard (2025)
"""

import numpy as np
import pandas as pd
import random
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from sklearn.metrics import silhouette_score
from IPython.display import display

# Configuraci√≥n global
np.random.seed(42)
random.seed(42)

# -----------------------------
# 1. Generaci√≥n del dataset de √≠tems
# -----------------------------

def generar_dataset(n_items=30, max_valor=200, max_peso=30, capacidad_mochila=None):
    """
    Genera un dataset sint√©tico de √≠tems con valor y peso aleatorio.
    
    Par√°metros:
        n_items (int): N√∫mero de √≠tems a generar
        max_valor (int): Valor m√°ximo por √≠tem
        max_peso (int): Peso m√°ximo por √≠tem
        capacidad_mochila (int): Capacidad de la mochila (si no se da, se calcula como 60% del peso total)
    
    Retorna:
        DataFrame con columnas ['item', 'valor', 'peso']
        capacidad (int): Capacidad m√°xima de la mochila
    """
    items = [f'Item_{i+1}' for i in range(n_items)]
    valores = np.random.randint(1, max_valor + 1, size=n_items)
    pesos = np.random.randint(1, max_peso + 1, size=n_items)
    
    df_items = pd.DataFrame({
        'item': items,
        'valor': valores,
        'peso': pesos
    })
    
    if capacidad_mochila is None:
        # Establecer capacidad en funci√≥n del total
        capacidad = int(df_items['peso'].sum() * 0.6)
    else:
        capacidad = capacidad_mochila
    
    return df_items, capacidad

# Generar dataset
df_items, capacidad = generar_dataset(n_items=30)  # Cambiar n_items seg√∫n necesidad
print("üì¶ Dataset de √≠tems:")
display(df_items.head(8))  # Mostrar solo algunos
print(f"\nCapacidad de la mochila: {capacidad} kg")

# -----------------------------
# 2. Funciones del algoritmo gen√©tico
# -----------------------------

def crear_individuo(n_genes):
    """
    Crea un individuo binario aleatorio (representa una posible soluci√≥n).
    Cada bit indica si se incluye (1) o no (0) un √≠tem.
    """
    return [random.randint(0, 1) for _ in range(n_genes)]

def evaluar(ind, df, capacidad):
    """
    Eval√∫a un individuo: calcula su valor total si cumple con la capacidad de la mochila.
    Si excede el peso, devuelve penalizaci√≥n (0).
    """
    peso_total = sum(ind[i] * df.iloc[i]['peso'] for i in range(len(ind)))
    valor_total = sum(ind[i] * df.iloc[i]['valor'] for i in range(len(ind)))
    return valor_total if peso_total <= capacidad else 0

def seleccion_torneo(poblacion, df, capacidad, k=3):
    """
    Selecci√≥n por torneo: elige k individuos aleatorios y retorna el mejor.
    """
    competidores = random.sample(poblacion, k)
    return max(competidores, key=lambda ind: evaluar(ind, df, capacidad))

def cruce_un_punto(p1, p2):
    """
    Cruce de un punto entre dos padres para generar un hijo.
    """
    punto = random.randint(1, len(p1) - 1)
    return p1[:punto] + p2[punto:]

def mutacion(ind, tasa_mutacion=0.05):
    """
    Aplica mutaci√≥n a cada gen del individuo con probabilidad `tasa_mutacion`.
    """
    return [1 - gen if random.random() < tasa_mutacion else gen for gen in ind]

def algoritmo_genetico(
    df,
    capacidad,
    generaciones=100,
    tama√±o_poblacion=50,
    tasa_mutacion=0.05
):
    """
    Ejecuta un algoritmo gen√©tico para resolver el problema de la mochila.
    
    Retorna:
        mejor_soluci√≥n (list): Representaci√≥n binaria del mejor individuo
        mejor_valor (float): Mejor valor obtenido
        historia (list): Historial del mejor valor por generaci√≥n
    """
    n = len(df)
    poblacion = [crear_individuo(n) for _ in range(tama√±o_poblacion)]
    mejores_valores = []

    for _ in range(generaciones):
        nueva_poblacion = []
        for _ in range(tama√±o_poblacion):
            p1 = seleccion_torneo(poblacion, df, capacidad)
            p2 = seleccion_torneo(poblacion, df, capacidad)
            hijo = cruce_un_punto(p1, p2)
            hijo = mutacion(hijo, tasa_mutacion)
            nueva_poblacion.append(hijo)
        poblacion = nueva_poblacion
        mejor_actual = max(poblacion, key=lambda ind: evaluar(ind, df, capacidad))
        mejores_valores.append(evaluar(mejor_actual, df, capacidad))

    mejor_final = max(poblacion, key=lambda ind: evaluar(ind, df, capacidad))
    mejor_valor = evaluar(mejor_final, df, capacidad)
    return mejor_final, mejor_valor, mejores_valores

# -----------------------------
# 3. Ejecutar m√∫ltiples corridas
# -----------------------------

# Par√°metros de simulaci√≥n
rondas = 20
resultados = []

for i in range(rondas):
    print(f"\rEjecutando ronda {i+1}/{rondas}", end="")
    solucion, valor, historia = algoritmo_genetico(
        df=df_items,
        capacidad=capacidad,
        generaciones=100,
        tama√±o_poblacion=50,
        tasa_mutacion=0.05
    )
    resultados.append({
        'ronda': i + 1,
        'solucion': solucion,
        'valor_total': valor,
        'historia': historia
    })

# Convertir resultados en DataFrame
df_resultados = pd.DataFrame(resultados)

# Calcular estad√≠sticas adicionales
df_resultados['media_historia'] = df_resultados['historia'].apply(lambda x: np.mean(x))
df_resultados['desviacion_std'] = df_resultados['historia'].apply(lambda x: np.std(x))

# -----------------------------
# 4. An√°lisis estad√≠stico
# -----------------------------

# Media y desviaci√≥n est√°ndar de los valores totales obtenidos
media_valores = df_resultados['valor_total'].mean()
std_valores = df_resultados['valor_total'].std()

# Test t contra un benchmark (ej.: 1000)
t_stat, p_valor = stats.ttest_1samp(df_resultados['valor_total'], popmean=1000)

# -----------------------------
# 5. Visualizaci√≥n de resultados
# -----------------------------

# Histograma de valores totales obtenidos
plt.figure(figsize=(12, 6))
sns.histplot(df_resultados['valor_total'], kde=True, color='steelblue', bins=10)
plt.title("Distribuci√≥n de Valores Totales Obtenidos")
plt.xlabel("Valor Total")
plt.ylabel("Frecuencia")
plt.axvline(media_valores, color='red', linestyle='--', label=f'Media: {media_valores:.2f}')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# Evoluci√≥n promedio del fitness durante las generaciones
plt.figure(figsize=(10, 5))
for i, row in df_resultados.iterrows():
    plt.plot(row['historia'], alpha=0.2, color='gray')
plt.plot(np.mean([r['historia'] for r in resultados], axis=0), label="Media Generacional", linewidth=2, color='navy')
plt.title("Evoluci√≥n del Fitness Promedio Durante Generaciones")
plt.xlabel("Generaci√≥n")
plt.ylabel("Fitness")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# -----------------------------
# 6. Resumen final e impresi√≥n de resultados
# -----------------------------

print("\n\nüìä RESUMEN FINAL DEL AN√ÅLISIS")
print(f"{'-'*40}")
print(f"Media del valor total: {media_valores:.2f}")
print(f"Desviaci√≥n est√°ndar: {std_valores:.2f}")
print(f"T-test vs Benchmark (H‚ÇÄ: media = 1000): t = {t_stat:.2f}, p = {p_valor:.4f}")
print("\nMejores soluciones por ronda:")
print(df_resultados[['ronda', 'valor_total']].sort_values(by='valor_total', ascending=False).head(10))

# Mostrar detalles de la mejor soluci√≥n
mejor_idx = df_resultados['valor_total'].idxmax()
mejor_solucion = df_resultados.loc[mejor_idx, 'solucion']
items_seleccionados = df_items.iloc[[i for i, val in enumerate(mejor_solucion) if val == 1]]
print("\nüéØ MEJOR SOLUCI√ìN ENCONTRADA:")
print(items_seleccionados)
print(f"\nPeso total: {items_seleccionados['peso'].sum()} / {capacidad}")
print(f"Valor total: {items_seleccionados['valor'].sum()}")